nextflow_process {

    name "Test VCF"

    script "./test_vcf.nf"
    process "TEST_VCF"
    
    test("Should output samples") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          path(filename).vcf.chromosome
          with(path(filename).vcf) {
            assert chromosome == "1"
            assert sampleCount == 60
            assert variantCount == 8285
            assert phased            
            //deprecated 
            assert noSamples == 60
            assert noSnps == 8285
        }
       }   
    }

    test("Should output number of SNPs") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert variantCount == 8285
        }
       }   
    }

    test("Should output summary") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert snapshot(
              summary
            ).match()
        }
       }   
    }
    test("Should output header") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert snapshot(
              header.getColumnCount()
            ).match()
        }
       }   
    }

    test("Should output first 5 variants") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
             assert getVariants(5).size() == 5
             assert getVariants().size() == 8285
        }
       }   
    }
    test("Should output all variants") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert variants.size() == 8285
            for(def variant : variants) {
              if(variant.getStart() == 240137682)
                assert variant.getHetCount() == 22
            }              
        }
       }   
    }

    test("Should output variants as MD5") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert snapshot(
              variantsMD5
            ).match()
        }
       }   
    }
    test("Should output hetcount (path)") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert getVariant("1",240001917).getHetCount() == 7 
        }
       }   
    }

    test("Should output hetcount (method)") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
            with(getVariant(path(filename),"1",240001917)) {
                assert getHetCount() == 7     
            }
       }   
    }

    test("Should output R2 info tag") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert getInfoR2("1",240001917) == 0.850629
        }
       }   
    }

    test("Should output userdefined info tag") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert getInfoTag("MAF","1",240001917) == '0.0719583'
        }
       }   
    }

    test("Should output VCF range") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            assert getVariantsByRange("1",240001917,240006785).size() == 4
        }
       }   
    }    

    test("Should create index") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.info.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
          with(path(filename).vcf) {
            createIndex()
            assert workflow.success
        }
       }   
    }

    test("Should output chromosomes") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf.gz")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
            with(path(filename).vcf) {
            assert chromosomes == ['1'] as Set
            assert chromosome == '1'
        }
        
       }   
    }
    
    test("Should output chromosomes from VCF") {

        when {
          process {
          """
          input[0] = file("${projectDir}/tests/data/valid/chunk_1_0240000001_0260000000.phased.dose.vcf")
          """
          }
        }

        then {
          def filename = process.out.vcf.get(0)
            with(path(filename).vcf) {
            assert chromosomes == ['1'] as Set
            assert chromosome == '1'
        }
        
       }   
    }    
    
}
